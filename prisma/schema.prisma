datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String         @id @default(cuid())
  walletAddress        String         @unique
  username             String
  bio                  String?        @default("New to Slacker")
  profilePicture       String?
  bannerPicture        String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  theme                String         @default("light")
  accountType          String         @default("METAMASK")
  lastActive           DateTime?      @default(now())

  posts                Post[]
  comments             Comment[]
  likes                Like[]
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications    Notification[]  @relation("SentNotifications")
}

model Post {
  id                   String         @id @default(cuid())
  content              String
  mediaUrl             String?
  mediaType            String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  authorId             String
  author               User           @relation(fields: [authorId], references: [id])

  comments             Comment[]
  likes                Like[]
  notifications        Notification[]
}

model Comment {
  id                   String         @id @default(cuid())
  content              String
  mediaUrl             String?
  mediaType            String?
  createdAt            DateTime       @default(now())

  authorId             String
  author               User           @relation(fields: [authorId], references: [id])

  postId               String
  post                 Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id                   String         @id @default(cuid())
  createdAt            DateTime       @default(now())

  userId               String
  user                 User           @relation(fields: [userId], references: [id])

  postId               String
  post                 Post           @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Notification {
  id                   String         @id @default(cuid())
  type                 String
  message              String
  read                 Boolean        @default(false)
  
  recipientId          String
  recipient            User           @relation("ReceivedNotifications", fields: [recipientId], references: [id])
  
  senderId             String
  sender               User           @relation("SentNotifications", fields: [senderId], references: [id])
  
  postId               String?
  post                 Post?          @relation(fields: [postId], references: [id])
  
  createdAt            DateTime       @default(now())
}